AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The Order service is part of the ACME Serverless Shop. The goal of this specific service is to interact with the catalog, front-end, and make calls to the order services.

Parameters:
  Version:
    Type: String
  User:
    Type: String
  Team:
    Type: String
  Feature:
    Type: String
    Default: acmeserverless
  Stage:
    Type: String
    Default: dev
  WavefrontURL:
    Type: String
  WavefrontToken:
    Type: String

Globals:
  Function:
    Timeout: 5
    Environment:
      Variables:
        REGION: !Ref AWS::Region
        WAVEFRONT_ENABLED: true
        WAVEFRONT_URL: !Ref WavefrontURL
        WAVEFRONT_API_TOKEN: !Ref WavefrontToken

Resources:
  OrderTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "ID"
          AttributeType: "S"
        - AttributeName: "User"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "ID"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "10"
      TableName: "Order"
      GlobalSecondaryIndexes: 
        - IndexName: "User"
          KeySchema: 
            - AttributeName: "User"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: "10"
            WriteCapacityUnits: "10"
  Add:
    Type: AWS::Serverless::Function
    Properties:
      Handler: add
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: Add
      Description: A Lambda function to add orders to DynamoDB
      MemorySize: 256
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AWSLambdaSQSQueueExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !Sub '${Stage}-${Feature}-payment-inbound'
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
      Environment:
        Variables:
          TABLENAME: !Ref OrderTable
          PAYMENT_QUEUE: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${Stage}-${Feature}-payment-inbound'
      Events:
        AddAPI:
          Type: Api
          Properties:
            Path: /order/add/{userid}
            Method: POST
      Tags:
        version: !Ref Version
        author: !Ref User
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  Ship:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ship
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: Ship
      Description: A Lambda function to send orders to the shipment service
      MemorySize: 256
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
        - SQSSendMessagePolicy:
            QueueName: !Sub '${Stage}-${Feature}-shipment-inbound'
      Environment:
        Variables:
          TABLENAME: !Ref OrderTable
          SHIPPING_QUEUE: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${Stage}-${Feature}-shipment-inbound'
      Events:
        SendToShipment:
          Type: SQS
          Properties:
            Queue: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${Stage}-${Feature}-payment-outbound'
            BatchSize: 1
            Enabled: true
      Tags:
        version: !Ref Version
        author: !Ref User
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  UpdateStatus:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatestatus
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: UpdateStatus
      Description: A Lambda function to update the delivery status in DynamoDB
      MemorySize: 256
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
      Environment:
        Variables:
          TABLENAME: !Ref OrderTable
      Events:
        UpdateStatus:
          Type: SQS
          Properties:
            Queue: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${Stage}-${Feature}-shipment-outbound'
            BatchSize: 1
            Enabled: true
      Tags:
        version: !Ref Version
        author: !Ref User
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  AllOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: allorders
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: AllOrders
      Description: A Lambda function to get all orders from DynamoDB
      MemorySize: 256
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
      Environment:
        Variables:
          TABLENAME: !Ref OrderTable
      Events:
        GetAllOrdersAPI:
          Type: Api
          Properties:
            Path: /order/all
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref User
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  UserOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: userorders
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: UserOrders
      Description: A Lambda function to get orders from DynamoDB based on the userID
      MemorySize: 256
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
      Environment:
        Variables:
          TABLENAME: !Ref OrderTable
      Events:
        GetOrdersByUserAPI:
          Type: Api
          Properties:
            Path: /order/{userid}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref User
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
Outputs:
  OrderTableARN:
    Description: ARN for the Order DynamoDB Table
    Value: !GetAtt OrderTable.Arn
  AddURL:
    Description: "API Gateway endpoint URL to add orders"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/order/add/{userid}"
  ShipARN:
    Description: ARN for the Ship function
    Value: !GetAtt Ship.Arn
  UpdateStatusARN:
    Description: ARN for the UpdateStatus function
    Value: !GetAtt UpdateStatus.Arn
  AllOrdersURL:
    Description: "API Gateway endpoint URL to get all orders"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/order/all"
  UserOrdersURL:
    Description: "API Gateway endpoint URL to get all orders for a user"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/order/{userid}"