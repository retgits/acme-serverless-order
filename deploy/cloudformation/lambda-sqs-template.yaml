AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

## A text string that describes the template.
Description: >
  The Order service is part of the ACME Fitness Serverless Shop. The goal of this specific service is to interact with the catalog, front-end, and make calls to the order services.

## Values to pass to your template at runtime (when you create or update a stack).
Parameters:
  Version:
    Type: String
  Author:
    Type: String
  Team:
    Type: String
  Feature:
    Type: String
    Default: acmeserverless
  Stage:
    Type: String
    Default: dev

Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"

## Specifies the stack resources and their properties.
Resources:
  AllOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-order-all
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "AllOrders-${Stage}"
      Description: A Lambda function to get all orders
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Order"
      Environment:
        Variables:
          TABLE: "Order"
      Events:
        GetAllOrdersAPI:
          Type: Api
          Properties:
            Path: /order/all
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  AllOrdersLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "AllOrders"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/order/", !Ref AllOrders]]
  UserOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-order-users
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "UserOrders-${Stage}"
      Description: A Lambda function to get all orders for a user
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Order"
      Environment:
        Variables:
          TABLE: "Order"
      Events:
        GetOrdersByUserAPI:
          Type: Api
          Properties:
            Path: /order/{userid}
            Method: GET
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  UserOrdersLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "UserOrders"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/order/", !Ref UserOrders]]
  AddOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-order-sqs-add
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "AddOrder-${Stage}"
      Description: A Lambda function to add orders
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Order"
        - SQSSendMessagePolicy:
            QueueName: !Sub '${Stage}-${Feature}-payment-request'
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          RESPONSEQUEUE: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${Stage}-${Feature}-payment-request'
          TABLE: Order
      Events:
        AddAPI:
          Type: Api
          Properties:
            Path: /order/add/{userid}
            Method: POST
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  AddOrderLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "AddOrder"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/order/", !Ref AddOrder]]
  ShipOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-order-sqs-ship
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "ShipOrder-${Stage}"
      Description: A Lambda function to send orders to the shipment service
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Order"
        - SQSSendMessagePolicy:
            QueueName: !Sub '${Stage}-${Feature}-shipment-request'
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TABLE: "Order"
          RESPONSEQUEUE: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${Stage}-${Feature}-shipment-request'
      Events:
        SendToShipment:
          Type: SQS
          Properties:
            Queue: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${Stage}-${Feature}-payment-response'
            BatchSize: 1
            Enabled: true
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  ShipOrderLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "ShipOrder"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/order/", !Ref ShipOrder]]
  UpdateOrder: 
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda-order-sqs-update
      Runtime: go1.x
      CodeUri: bin/
      FunctionName: !Sub "UpdateOrder-${Stage}"
      Description: A Lambda function to update orders
      MemorySize: 256
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: "Order"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TABLE: "Order"
      Events:
        UpdateOrder:
          Type: SQS
          Properties:
            Queue: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${Stage}-${Feature}-shipment-response'
            BatchSize: 1
            Enabled: true
      Tags:
        version: !Ref Version
        author: !Ref Author
        team: !Ref Team
        feature: !Ref Feature
        region: !Ref AWS::Region
      VersionDescription: !Ref Version
  UpdateOrderLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: "UpdateOrder"
    Properties: 
      RetentionInDays: 1
      LogGroupName: !Join ["", ["/aws/lambda/order/", !Ref UpdateOrder]]

## Describes the values that are returned whenever you view your stack's properties.
Outputs:
  AllOrdersURL:
    Description: "API Gateway endpoint URL to get all orders"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/order/all"
  UserOrdersURL:
    Description: "API Gateway endpoint URL to get all orders for a user"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/order/{userid}"
  AddOrderARN:
    Description: ARN for the AddOrder function
    Value: !GetAtt AddOrder.Arn
  AddOrderURL:
    Description: "API Gateway endpoint URL to add an orders"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/order/add/{userid}"
  ShipOrderARN:
    Description: ARN for the ShipOrder function
    Value: !GetAtt ShipOrder.Arn
  UpdateOrderARN:
    Description: ARN for the UpdateOrder function
    Value: !GetAtt UpdateOrder.Arn